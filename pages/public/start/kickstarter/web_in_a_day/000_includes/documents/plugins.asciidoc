---
layout:                       page
description:                  Jekyll API - Extend Jekyll using Plugins
title:                        Jekyll API - Plugins
tagline:                      Extend Jekyll using Plugins
group:                        pages
toc:                          true
---

:doctype:                     article
:website:                     https://jekyllrb.com/
:revnumber:                   3.2.1

// URLs
:tao-of-programming:          http://www.canonical.org/~kragen/tao-of-programming.html


[.boxShadow]
====
Jekyll has a plugin system with hooks that allow you to create custom
generated content specific to your site. You can run custom code for
your site without having to modify the Jekyll source itself.
====


== Jekyll Plugins

Plugins on GitHub Pages
---------------------------------------------------------------------------
<a href="http://pages.github.com/">GitHub Pages</a> is powered by Jekyll,
however all Pages sites are generated using the <code>--safe</code> option
to disable custom plugins for security reasons. Unfortunately, this means
your plugins won’t work if you’re deploying to GitHub Pages.<br><br>
You can still use GitHub Pages to publish your site, but you’ll need to
convert the site locally and push the generated static files to your GitHub
repository instead of the Jekyll source files.
---------------------------------------------------------------------------

Installing a plugin
~~~~~~~~~~~~~~~~~~~

You have 2 options for installing plugins:

1.  In your site source root, make a `_plugins` directory. Place your
plugins here. Any file ending in `*.rb` inside this directory will be
loaded before Jekyll generates your site.
2.  In your `_config.yml` file, add a new array with the key `gems` and
the values of the gem names of the plugins you'd like to use. An
example:
+
---------------------------------------------------------
gems: [jekyll-test-plugin, jekyll-jsonify, jekyll-assets]
# This will require each of these gems automatically.
---------------------------------------------------------

-------------------------------------------
<code>_plugins</code> and <code>gems</code>
can be used simultaneously
-------------------------------------------

-----------------------------------------------------------------------------
You may use both of the aforementioned plugin options simultaneously in the
same site if you so choose. Use of one does not restrict the use of the other
-----------------------------------------------------------------------------

In general, plugins you make will fall into one of three categories:

1.  Generators
2.  Converters
3.  Tags

Generators
~~~~~~~~~~

You can create a generator when you need Jekyll to create additional
content based on your own rules.

A generator is a subclass of `Jekyll::Generator` that defines a
`generate` method, which receives an instance of
link:{{%20site.repository%20}}/blob/master/lib/jekyll/site.rb[`Jekyll::Site`].

Generation is triggered for its side-effects, the return value of
`generate` is ignored. Jekyll does not assume any particular side-effect
to happen, it just runs the method.

Generators run after Jekyll has made an inventory of the existing
content, and before the site is generated. Pages with YAML front-matters
are stored as instances of
link:{{%20site.repository%20}}/blob/master/lib/jekyll/page.rb[`Jekyll::Page`]
and are available via `site.pages`. Static files become instances of
link:{{%20site.repository%20}}/blob/master/lib/jekyll/static_file.rb[`Jekyll::StaticFile`]
and are available via `site.static_files`. 

// See link:/docs/variables/[theVariables documentation page] and link:{{%20site.repository%20}}/blob/master/lib/jekyll/site.rb[`Jekyll::Site`] for more details.

For instance, a generator can inject values computed at build time for
template variables. In the following example the template `reading.html`
has two variables `ongoing` and `done` that we fill in the generator:

\{% highlight ruby %} module Reading class Generator < Jekyll::Generator
def generate(site) ongoing, done = Book.all.partition(&:ongoing?)

------------------------------------------------------------------
  reading = site.pages.detect {|page| page.name == 'reading.html'}
  reading.data['ongoing'] = ongoing
  reading.data['done'] = done
end
------------------------------------------------------------------

end end \{% endhighlight %}

This is a more complex generator that generates new pages:

\{% highlight ruby %} module Jekyll

class CategoryPage < Page def initialize(site, base, dir, category)
@site = site @base = base @dir = dir @name = 'index.html'

------------------------------------------------------------------------------
  self.process(@name)
  self.read_yaml(File.join(base, '_layouts'), 'category_index.html')
  self.data['category'] = category

  category_title_prefix = site.config['category_title_prefix'] || 'Category: '
  self.data['title'] = "#{category_title_prefix}#{category}"
end
------------------------------------------------------------------------------

end

class CategoryPageGenerator < Generator safe true

-------------------------------------------------------------------------------------------
def generate(site)
  if site.layouts.key? 'category_index'
    dir = site.config['category_dir'] || 'categories'
    site.categories.keys.each do |category|
      site.pages << CategoryPage.new(site, site.source, File.join(dir, category), category)
    end
  end
end
-------------------------------------------------------------------------------------------

end

end \{% endhighlight %}

In this example, our generator will create a series of files under the
`categories` directory for each category, listing the posts in each
category using the `category_index.html` layout.

Generators are only required to implement one method:

----------------------
<tr>
  <th>Method</th>
  <th>Description</th>
</tr>
----------------------

----------------------------------------------
<tr>
  <td>
    <p><code>generate</code></p>
  </td>
  <td>
    <p>Generates content as a side-effect.</p>
  </td>
</tr>
----------------------------------------------


[[converters]]
Converters
~~~~~~~~~~

If you have a new markup language you’d like to use with your site, you
can include it by implementing your own converter. Both the Markdown and
Textile markup languages are implemented using this method.

Remember your YAML front-matter
---------------------------------------------------------------------------
Jekyll will only convert files that have a YAML header at the top, even for
converters you add using a plugin.
---------------------------------------------------------------------------

Below is a converter that will take all posts ending in `.upcase` and
process them using the `UpcaseConverter`:

\{% highlight ruby %} module Jekyll class UpcaseConverter < Converter
safe true priority :low

----------------------
def matches(ext)
  ext =~ /^\.upcase$/i
end

def output_ext(ext)
  ".html"
end

def convert(content)
  content.upcase
end
----------------------

end end \{% endhighlight %}

Converters should implement at a minimum 3 methods:

----------------------
<tr>
  <th>Method</th>
  <th>Description</th>
</tr>
----------------------

---------------------------------------------------------------------------
<tr>
  <td>
    <p><code>matches</code></p>
  </td>
  <td><p>
    Does the given extension match this converter’s list of acceptable
    extensions? Takes one argument: the file’s extension (including the
    dot). Must return <code>true</code> if it matches, <code>false</code>
    otherwise.
  </p></td>
</tr>
<tr>
  <td>
    <p><code>output_ext</code></p>
  </td>
  <td><p>
    The extension to be given to the output file (including the dot).
    Usually this will be <code>".html"</code>.
  </p></td>
</tr>
<tr>
  <td>
    <p><code>convert</code></p>
  </td>
  <td><p>
    Logic to do the content conversion. Takes one argument: the raw content
    of the file (without YAML front matter). Must return a String.
  </p></td>
</tr>
---------------------------------------------------------------------------

In our example, `UpcaseConverter#matches` checks if our filename
extension is `.upcase`, and will render using the converter if it is. It
will call `UpcaseConverter#convert` to process the content. In our
simple converter we’re simply uppercasing the entire content string.
Finally, when it saves the page, it will do so with a `.html` extension.

[[tags]]
Tags
~~~~

If you’d like to include custom liquid tags in your site, you can do so
by hooking into the tagging system. Built-in examples added by Jekyll
include the `highlight` and `include` tags. Below is an example of a
custom liquid tag that will output the time the page was rendered:

\{% highlight ruby %} module Jekyll class RenderTimeTag < Liquid::Tag

--------------------------------------
def initialize(tag_name, text, tokens)
  super
  @text = text
end

def render(context)
  "#{@text} #{Time.now}"
end
--------------------------------------

end end

Liquid::Template.register_tag('render_time', Jekyll::RenderTimeTag) \{%
endhighlight %}

At a minimum, liquid tags must implement:

----------------------
<tr>
  <th>Method</th>
  <th>Description</th>
</tr>
----------------------

------------------------------------------
<tr>
  <td>
    <p><code>render</code></p>
  </td>
  <td>
    <p>Outputs the content of the tag.</p>
  </td>
</tr>
------------------------------------------

You must also register the custom tag with the Liquid template engine as
follows:

\{% highlight ruby %} Liquid::Template.register_tag('render_time',
Jekyll::RenderTimeTag) \{% endhighlight %}

In the example above, we can place the following tag anywhere in one of
our pages:

\{% highlight ruby %} \{% raw %}
\{% render_time page rendered at: %}
\{% endraw %} \{% endhighlight %}

And we would get something like this on the page:

\{% highlight html %}
page rendered at: Tue June 22 23:38:47 –0500 2010
\{% endhighlight %}

[[liquid-filters]]
Liquid filters
^^^^^^^^^^^^^^

You can add your own filters to the Liquid template system much like you
can add tags above. Filters are simply modules that export their methods
to liquid. All methods will have to take at least one parameter which
represents the input of the filter. The return value will be the output
of the filter.

\{% highlight ruby %} module Jekyll module AssetFilter def
asset_url(input) "http://www.example.com/#\{input}?#\{Time.now.to_i}"
end end end

Liquid::Template.register_filter(Jekyll::AssetFilter) \{% endhighlight
%}

ProTip™: Access the site object using Liquid
---------------------------------------------------------------------------------------------------------------
Jekyll lets you access the <code>site</code> object through the
<code>context.registers</code> feature of Liquid at <code>context.registers[:site]</code>. For example, you can
access the global configuration file <code>_config.yml</code> using
<code>context.registers[:site].config</code>.
---------------------------------------------------------------------------------------------------------------

[[flags]]
Flags
^^^^^

There are two flags to be aware of when writing a plugin:

----------------------
<tr>
  <th>Flag</th>
  <th>Description</th>
</tr>
----------------------

---------------------------------------------------------------------------
<tr>
  <td>
    <p><code>safe</code></p>
  </td>
  <td>
    <p>
      A boolean flag that informs Jekyll whether this plugin may be safely
      executed in an environment where arbitrary code execution is not
      allowed. This is used by GitHub Pages to determine which core plugins
      may be used, and which are unsafe to run. If your plugin does not
      allow for arbitrary code, execution, set this to <code>true</code>.
      GitHub Pages still won’t load your plugin, but if you submit it for
      inclusion in core, it’s best for this to be correct!
    </p>
  </td>
</tr>
<tr>
  <td>
    <p><code>priority</code></p>
  </td>
  <td>
    <p>
      This flag determines what order the plugin is loaded in. Valid values
      are: <code>:lowest</code>, <code>:low</code>, <code>:normal</code>,
      <code>:high</code>, and <code>:highest</code>. Highest priority
      matches are applied first, lowest priority are applied last.
    </p>
  </td>
</tr>
---------------------------------------------------------------------------

To use one of the example plugins above as an illustration, here is how
you’d specify these two flags:

\{% highlight ruby %} module Jekyll class UpcaseConverter < Converter
safe true priority :low ... end end \{% endhighlight %}

///////////////////////////

[[available-plugins]]
Available Plugins
~~~~~~~~~~~~~~~~~

You can find a few useful plugins at the following locations:

[[generators-1]]
Generators
++++++++++

* https://gist.github.com/707909[ArchiveGenerator by Ilkka Laukkanen]:
Uses https://gist.github.com/707020[this archive page] to generate
archives.
* https://gist.github.com/642739[LESS.js Generator by Andy Fowler]:
Renders LESS.js files during generation.
* https://gist.github.com/449491[Version Reporter by Blake Smith]:
Creates a version.html file containing the Jekyll version.
* https://github.com/kinnetica/jekyll-plugins[Sitemap.xml Generator by
Michael Levin]: Generates a sitemap.xml file by traversing all of the
available posts and pages.
* https://github.com/PascalW/jekyll_indextank[Full-text search by Pascal
Widdershoven]: Adds full-text search to your Jekyll site with a plugin
and a bit of JavaScript.
* https://github.com/tsmango/jekyll_alias_generator[AliasGenerator by
Thomas Mango]: Generates redirect pages for posts when an alias is
specified in the YAML Front Matter.
* https://github.com/nquinlan/jekyll-pageless-redirects[Pageless
Redirect Generator by Nick Quinlan]: Generates redirects based on files
in the Jekyll root, with support for htaccess style redirects.
* https://github.com/fhemberger/jekyll-projectlist[Projectlist by
Frederic Hemberger]: Renders files in a directory as a single page
instead of separate posts.
* https://github.com/agelber/jekyll-rss[RssGenerator by Assaf Gelber]:
Automatically creates an RSS 2.0 feed from your posts.
* https://github.com/shigeya/jekyll-monthly-archive-plugin[Monthly
archive generator by Shigeya Suzuki]: Generator and template which
renders monthly archive like MovableType style, based on the work by
Ilkka Laukkanen and others above.
* https://github.com/shigeya/jekyll-category-archive-plugin[Category
archive generator by Shigeya Suzuki]: Generator and template which
renders category archive like MovableType style, based on Monthly
archive generator.
* https://github.com/yihangho/emoji-for-jekyll[Emoji for Jekyll]:
Seamlessly enable emoji for all posts and pages.
* https://github.com/mscharley/jekyll-compass[Compass integration for
Jekyll]: Easily integrate Compass and Sass with your Jekyll website.
* https://github.com/bbakersmith/jekyll-pages-directory[Pages Directory
by Ben Baker-Smith]: Defines a `_pages` directory for page files which
routes its output relative to the project root.
* https://github.com/jeffkole/jekyll-page-collections[Page Collections
by Jeff Kolesky]: Generates collections of pages with functionality that
resembles posts.
* https://github.com/sheehamj13/jekyll-live-tiles[Windows 8.1 Live Tile
Generation by Matt Sheehan]: Generates Internet Explorer 11 config.xml
file and Tile Templates for pinning your site to Windows 8.1.

[[converters-1]]
Converters
++++++++++

* https://github.com/snappylabs/jade-jekyll-plugin[Jade plugin by John
Papandriopoulos]: Jade converter for Jekyll.
* https://gist.github.com/517556[HAML plugin by Sam Z]: HAML converter
for Jekyll.
* https://gist.github.com/481456[HAML-Sass Converter by Adam Pearson]:
Simple HAML-Sass converter for Jekyll.
https://gist.github.com/528642[Fork] by Sam X.
* https://gist.github.com/960150[Sass SCSS Converter by Mark Wolfe]:
Sass converter which uses the new CSS compatible syntax, based Sam X’s
fork above.
* https://gist.github.com/639920[LESS Converter by Jason Graham]:
Convert LESS files to CSS.
* https://gist.github.com/760265[LESS Converter by Josh Brown]: Simple
LESS converter.
* https://gist.github.com/449463[Upcase Converter by Blake Smith]: An
example Jekyll converter.
* https://gist.github.com/959938[CoffeeScript Converter by phaer]: A
http://coffeescript.org[CoffeeScript] to Javascript converter.
* https://github.com/olov/jekyll-references[Markdown References by Olov
Lassus]: Keep all your markdown reference-style link definitions in one
_references.md file.
* https://gist.github.com/988201[Stylus Converter]: Convert .styl to
.css.
* https://github.com/xdissent/jekyll-rst[ReStructuredText Converter]:
Converts ReST documents to HTML with Pygments syntax highlighting.
* https://github.com/dsanson/jekyll-pandoc-plugin[Jekyll-pandoc-plugin]:
Use pandoc for rendering markdown.
*
https://github.com/fauno/jekyll-pandoc-multiple-formats[Jekyll-pandoc-multiple-formats]
by https://github.com/edsl[edsl]: Use pandoc to generate your site in
multiple formats. Supports pandoc’s markdown extensions.
* https://gist.github.com/1472645[Transform Layouts]: Allows HAML
layouts (you need a HAML Converter plugin for this to work).
* https://gist.github.com/abhiyerra/7377603[Org-mode Converter]:
Org-mode converter for Jekyll.

[[filters]]
Filters
+++++++

* https://github.com/MattHall/truncatehtml[Truncate HTML] by
http://codebeef.com[Matt Hall]: A Jekyll filter that truncates HTML
while preserving markup structure.
* https://github.com/LawrenceWoodman/domain_name-liquid_filter[Domain
Name Filter by Lawrence Woodman]: Filters the input text so that just
the domain name is left.
* https://gist.github.com/731597[Summarize Filter by Mathieu Arnold]:
Remove markup after a `<div id="extended">` tag.
* https://gist.github.com/919275[URL encoding by James An]: Percent
encoding for URIs.
* https://gist.github.com/1850654[JSON Filter] by
https://github.com/joelverhagen[joelverhagen]: Filter that takes input
text and outputs it as JSON. Great for rendering JavaScript.
*
https://github.com/gacha/gacha.id.lv/blob/master/_plugins/i18n_filter.rb[i18n_filter]:
Liquid filter to use I18n localization.
* https://github.com/SaswatPadhi/jekyll_smilify[Smilify] by
https://github.com/SaswatPadhi[SaswatPadhi]: Convert text emoticons in
your content to themeable smiley pics
(http://saswatpadhi.github.com/[Demo]).
* https://gist.github.com/zachleat/5792681[Read in X Minutes] by
https://github.com/zachleat[zachleat]: Estimates the reading time of a
string (for blog post content).
* https://github.com/markets/jekyll-timeago[Jekyll-timeago]: Converts a
time value to the time ago in words.
* https://github.com/bdesham/pluralize[pluralize]: Easily combine a
number and a word into a gramatically-correct amount like “1 minute” or
“2 minute**s**”.
* https://github.com/bdesham/reading_time[reading_time]: Count words and
estimate reading time for a piece of text, ignoring HTML elements that
are unlikely to contain running text.
* https://github.com/dafi/jekyll-toc-generator[Table of Content
Generator]: Generate the HTML code containing a table of content (TOC),
the TOC can be customized in many way, for example you can decide which
pages can be without TOC.
* https://github.com/23maverick23/jekyll-humanize[jekyll-humanize]: This
is a port of the Django app humanize which adds a "human touch" to data.
Each method represents a Fluid type filter that can be used in your
Jekyll site templates. Given that Jekyll produces static sites, some of
the original methods do not make logical sense to port (e.g.
naturaltime).
* https://github.com/PatrickC8t/Jekyll-Ordinal[Jekyll-Ordinal]: Jekyll
liquid filter to output a date ordinal such as "st", "nd", "rd", or
"th".
* https://github.com/kzykbys/JekyllPlugins[Deprecated articles keeper]
by http://blog.kazuya.co/[Kazuya Kobayashi]: A simple Jekyll filter
which monitor how old an article is.

[[tags-1]]
Tags
++++

* https://github.com/samrayner/jekyll-asset-path-plugin[Asset Path Tag]
by http://www.samrayner.com/[Sam Rayner]: Allows organisation of assets
into subdirectories by outputting a path for a given file relative to
the current post or page.
* https://github.com/christianhellsten/jekyll-plugins[Delicious Plugin
by Christian Hellsten]: Fetches and renders bookmarks from
delicious.com.
* https://gist.github.com/480380[Ultraviolet Plugin by Steve Alex]:
Jekyll tag for the http://ultraviolet.rubyforge.org/[Ultraviolet] code
highligher.
* https://gist.github.com/710577[Tag Cloud Plugin by Ilkka Laukkanen]:
Generate a tag cloud that links to tag pages.
* https://gist.github.com/730347[GIT Tag by Alexandre Girard]: Add Git
activity inside a list.
* https://gist.github.com/834610[MathJax Liquid Tags by Jessy
Cowan-Sharp]: Simple liquid tags for Jekyll that convert inline math and
block equations to the appropriate MathJax script tags.
* https://gist.github.com/1027674[Non-JS Gist Tag by Brandon Tilley] A
Liquid tag that embeds Gists and shows code for non-JavaScript enabled
browsers and readers.
* https://gist.github.com/449509[Render Time Tag by Blake Smith]:
Displays the time a Jekyll page was generated.
* https://gist.github.com/912466[Status.net/OStatus Tag by phaer]:
Displays the notices in a given status.net/ostatus feed.
* https://gist.github.com/1020852[Raw Tag by phaer]: Keeps liquid from
parsing text betweeen `raw` tags.
* https://github.com/robb/jekyll-embedly-client[Embed.ly client by
Robert Böhnke]: Autogenerate embeds from URLs using oEmbed.
* https://gist.github.com/2290195[Logarithmic Tag Cloud]: Flexible.
Logarithmic distribution. Documentation inline.
* https://gist.github.com/1455726[oEmbed Tag by Tammo van Lessen]:
Enables easy content embedding (e.g. from YouTube, Flickr, Slideshare)
via oEmbed.
* https://github.com/tsmango/jekyll_flickr_set_tag[FlickrSetTag by
Thomas Mango]: Generates image galleries from Flickr sets.
* https://github.com/scottwb/jekyll-tweet-tag[Tweet Tag by Scott W.
Bradley]: Liquid tag for
https://dev.twitter.com/docs/embedded-tweets[Embedded Tweets] using
Twitter’s shortcodes.
*
https://github.com/rustygeldmacher/jekyll-contentblocks[Jekyll-contentblocks]:
Lets you use Rails-like content_for tags in your templates, for passing
content from your posts up to your layouts.
* https://gist.github.com/1805814[Generate YouTube Embed] by
https://github.com/joelverhagen[joelverhagen]: Jekyll plugin which
allows you to embed a YouTube video in your page with the YouTube ID.
Optionally specify width and height dimensions. Like “oEmbed Tag” but
just for YouTube.
* https://github.com/okeeblow/jekyll-beastiepress[Jekyll-beastiepress]:
FreeBSD utility tags for Jekyll sites.
* https://gist.github.com/1895282[Jsonball]: Reads json files and
produces maps for use in Jekyll files.
* https://github.com/pablooliveira/bibjekyll[Bibjekyll]: Render
BibTeX-formatted bibliographies/citations included in posts and pages
using bibtex2html.
* https://github.com/archome/jekyll-citation[Jekyll-citation]: Render
BibTeX-formatted bibliographies/citations included in posts and pages
(pure Ruby).
* https://github.com/ericdfields/Jekyll-Dribbble-Set-Tag[Jekyll Dribbble
Set Tag]: Builds Dribbble image galleries from any user.
* https://gist.github.com/2218470[Debbugs]: Allows posting links to
Debian BTS easily.
* https://github.com/aburdette/refheap_tag[Refheap_tag]: Liquid tag that
allows embedding pastes from https://refheap.com[refheap].
* https://gist.github.com/2403522[Jekyll-devonly_tag]: A block tag for
including markup only during development.
* https://github.com/redwallhp/JekyllGalleryTag[JekyllGalleryTag] by
https://github.com/redwallhp[redwallhp]: Generates thumbnails from a
directory of images and displays them in a grid.
* https://gist.github.com/Yexiaoxing/5891929[Youku and Tudou Embed]:
Liquid plugin for embedding Youku and Tudou videos.
* https://github.com/sectore/jekyll-swfobject[Jekyll-swfobject]: Liquid
plugin for embedding Adobe Flash files (.swf) using
http://code.google.com/p/swfobject/[SWFObject].
* https://github.com/robwierzbowski/jekyll-picture-tag[Jekyll Picture
Tag]: Easy responsive images for Jekyll. Based on the proposed
http://picture.responsiveimages.org/[`<picture>`] element, polyfilled
with Scott Jehl’s https://github.com/scottjehl/picturefill[Picturefill].
* https://github.com/robwierzbowski/jekyll-image-tag[Jekyll Image Tag]:
Better images for Jekyll. Save image presets, generate resized images,
and add classes, alt text, and other attributes.
* https://github.com/matze/jekyll-ditaa[Ditaa Tag] by
https://github.com/matze[matze]: Renders ASCII diagram art into PNG
images and inserts a figure tag.
* https://github.com/penibelst/jekyll-good-include[Good Include] by
http://penibelst.de/[Anatol Broder]: Strips newlines and whitespaces
from the end of include files before processing.
* https://github.com/davidensinger/jekyll-suggested-tweet[Jekyll
Suggested Tweet] by https://github.com/davidensinger/[David Ensinger]: A
Liquid tag for Jekyll that allows for the embedding of suggested tweets
via Twitter’s Web Intents API.
* https://github.com/GSI/jekyll_date_chart[Jekyll Date Chart] by
https://github.com/GSI[GSI]: Block that renders date line charts based
on textile-formatted tables.
* https://github.com/GSI/jekyll_image_encode[Jekyll Image Encode] by
https://github.com/GSI[GSI]: Tag that renders base64 codes of images
fetched from the web.
* https://github.com/GSI/jekyll_quick_man[Jekyll Quick Man] by
https://github.com/GSI[GSI]: Tag that renders pretty links to man page
sources on the internet.
* https://gist.github.com/23maverick23/8532525[jekyll-font-awesome]:
Quickly and easily add Font Awesome icons to your posts.
* https://gist.github.com/tobru/9171700[Lychee Gallery Tag] by
https://github.com/tobru[tobru]: Include
http://lychee.electerious.com/[Lychee] albums into a post. For an
introduction, see
https://tobrunet.ch/articles/jekyll-meets-lychee-a-liquid-tag-plugin/[Jekyll
meets Lychee - A Liquid Tag plugin]
* https://github.com/callmeed/jekyll-image-set[Image Set/Gallery Tag] by
https://github.com/callmeed[callmeed]: Renders HTML for an image gallery
from a folder in your Jekyll site. Just pass it a folder name and
class/tag options.
* https://github.com/lmullen/jekyll_figure[jekyll_figure]: Generate
figures and captions with links to the figure in a variety of formats
* https://github.com/bwillis/jekyll-github-sample[Jekyll Github Sample
Tag]: A liquid tag to include a sample of a github repo file in your
Jekyll site.
* https://github.com/rob-murray/jekyll-version-plugin[Jekyll Project
Version Tag]: A Liquid tag plugin that renders a version identifier for
your Jekyll site sourced from the git repository containing your code.
* https://github.com/AlessandroLorenzi/piwigo_gallery[Piwigo Gallery] by
http://www.alorenzi.eu/[Alessandro Lorenzi]: Jekyll plugin to generate
thumbnails from a Piwigo gallery and display them with a Liquid tag

[[collections]]
Collections
+++++++++++

* http://recursive-design.com/projects/jekyll-plugins/[Jekyll Plugins by
Recursive Design]: Plugins to generate Project pages from GitHub
readmes, a Category page, and a Sitemap generator.
* https://github.com/flatterline/jekyll-plugins[Company website and blog
plugins] by Flatterline, a http://flatterline.com/[Ruby on Rails
development company]: Portfolio/project page generator, team/individual
page generator, an author bio liquid tag for use on posts, and a few
other smaller plugins.
* https://github.com/aucor/jekyll-plugins[Jekyll plugins by Aucor]:
Plugins for trimming unwanted newlines/whitespace and sorting pages by
weight attribute.

[[other]]
Other
+++++

*
https://github.com/rsim/blog.rayapps.com/blob/master/_plugins/pygments_cache_patch.rb[Pygments
Cache Path by Raimonds Simanovskis]: Plugin to cache syntax-highlighted
code from Pygments.
* https://gist.github.com/49630[Draft/Publish Plugin by Michael Ivey]:
Save posts as drafts.
* https://gist.github.com/490101[Growl Notification Generator by Tate
Johnson]: Send Jekyll notifications to Growl.
* https://gist.github.com/525267[Growl Notification Hook by Tate
Johnson]: Better alternative to the above, but requires his “hook” fork.
* https://github.com/LawrenceWoodman/related_posts-jekyll_plugin[Related
Posts by Lawrence Woodman]: Overrides `site.related_posts` to use
categories to assess relationship.
* https://gist.github.com/88cda643aa7e3b0ca1e5[Tiered Archives by Eli
Naeher]: Create tiered template variable that allows you to group
archives by year and month.
*
https://github.com/blackwinter/jekyll-localization[Jekyll-localization]:
Jekyll plugin that adds localization features to the rendering engine.
* https://github.com/blackwinter/jekyll-rendering[Jekyll-rendering]:
Jekyll plugin to provide alternative rendering engines.
* https://github.com/blackwinter/jekyll-pagination[Jekyll-pagination]:
Jekyll plugin to extend the pagination generator.
* https://github.com/pattex/jekyll-tagging[Jekyll-tagging]: Jekyll
plugin to automatically generate a tag cloud and tag pages.
* https://github.com/inukshuk/jekyll-scholar[Jekyll-scholar]: Jekyll
extensions for the blogging scholar.
* https://github.com/moshen/jekyll-asset_bundler[Jekyll-asset_bundler]:
Bundles and minifies JavaScript and CSS.
* http://ixti.net/jekyll-assets/[Jekyll-assets] by
https://github.com/ixti[ixti]: Rails-alike assets pipeline (write assets
in CoffeeScript, Sass, LESS etc; specify dependencies for automatic
bundling using simple declarative comments in assets; minify and
compress; use JST templates; cache bust; and many-many more).
* https://github.com/kitsched/japr[JAPR]: Jekyll Asset Pipeline Reborn -
Powerful asset pipeline for Jekyll that collects, converts and
compresses JavaScript and CSS assets.
* https://gist.github.com/2758691[File compressor] by
https://github.com/mytharcher[mytharcher]: Compress HTML and JavaScript
files on site build.
* https://github.com/tkareine/jekyll-minibundle[Jekyll-minibundle]:
Asset bundling and cache busting using external minification tool of
your choice. No gem dependencies.
* https://github.com/JCB-K/singlepage-jekyll[Singlepage-jekyll] by
https://github.com/JCB-K[JCB-K]: Turns Jekyll into a dynamic one-page
website.
*
https://github.com/robwierzbowski/generator-jekyllrb[generator-jekyllrb]:
A generator that wraps Jekyll in http://yeoman.io/[Yeoman], a tool
collection and workflow for builing modern web apps.
* https://github.com/dannygarcia/grunt-jekyll[grunt-jekyll]: A
straightforward http://gruntjs.com/[Grunt] plugin for Jekyll.
* https://github.com/indirect/jekyll-postfiles[jekyll-postfiles]: Add
`_postfiles` directory and \{% raw %}`{{ postfile }}`\{% endraw %} tag
so the files a post refers to will always be right there inside your
repo.
* https://github.com/penibelst/jekyll-compress-html[A layout that
compresses HTML] by http://penibelst.de/[Anatol Broder]: Github Pages
compatible, configurable way to compress HTML files on site build.

[[editors]]
Editors
+++++++

* https://github.com/23maverick23/sublime-jekyll[sublime-jekyll]: A
Sublime Text package for Jekyll static sites. This package should help
creating Jekyll sites and posts easier by providing access to key
template tags and filters, as well as common completions and a current
date/datetime command (for dating posts). You can install this package
manually via GitHub, or via
https://sublime.wbond.net/packages/Jekyll[Package Control].
* https://github.com/parkr/vim-jekyll[vim-jekyll]: A vim plugin to
generate new posts and run `jekyll build` all without leaving vim.

Jekyll Plugins Wanted
----------------------------------------------------------------------------
If you have a Jekyll plugin that you would like to see added to this list,
you should <a href="../contributing/">read the contributing page</a> to find
out how to make that happen.
----------------------------------------------------------------------------

///////////////////////////