// ~/document_base_folder/000_includes
//  Asciidoc part includes:                 parts.asciidoc
// -----------------------------------------------------------------------------


// Summarize
// -----------------------------------------------------------------------------
//  tag::summarize[]
//
A lot you've learned, time to summarize what is in behind. The last chapter 
*Summarize!* should help on that. Summarize! offer some handy sections to
remember what was presented this chapter, giving an outlook what could be
done next, an overview on all chapters this tutorial and finally useful
links to read more.

See all *sections* below: +
mdi:backup-restore[24px, md-grey ml-3]
<<Recap>> -- What has been done, what's *explored in current section* +
mdi:skip-next[24px, md-grey ml-3]
<<Whats Next>> -- Find to go further, what's *planned next* +
mdi:format-section[24px, md-grey ml-3]
<<All Chapters>> -- The full chain, *all chapters* +
// mdi:book-open[24px, md-grey ml-3]
// <<Further Reading>> -- List of helpful links to *get more* +

//
//  end::summarize[]

// End Summarize ---------------------------------------------------------------


// Recap
// -----------------------------------------------------------------------------
//  tag::recap_100_meet_and_greet_jekyll[]
//
To manage controlled page access, a web is transformed into an application.
Additional software is needed for that: the J1 *AuthManager*. Build on the 
_Ruby_ software framework _Rack_.

A middleware system based on Rack is not a *monolithic* block. It is a *stack*
of *multiple* middleware components -- what the name *Rack* implies. What is 
called *Middlewares* is the next great magic: _Ruby_ libraries (Gem)
managing a *specific* job as *service* in such a *chain*.

For now folks, keep in mind a *Jekyll Site* can be transformed into an 
*Web Application* as a additional *mode* using *Rack*. Rack provides the 
*magic* in the middle to add additional dynamic processes provided by
J1 AuthManager: *Services*.
//
//  end::recap_100_meet_and_greet_jekyll[]

//  tag::recap_200_preparations[]
//
Running a web as an app is not that hard, isn't it? The magic is under the 
hood - the middlewares used by J1 AuthManager.

lorem:sentences[5] +
lorem:sentences[3] +

Find here is a list of the basic Chocolatey commands used this section. 
And some more related ones. If you'd like to explore the Chocolatey CLI a bit 
*more*, give it a try before moving on.

[cols="8a,4", options="header", role="table-responsive, full-width"]
|===============================================================================
|Command |Description

|
[source, bash]
----
docker build -t first-app .
----
|Create the `image` *friendlyname* using this directory's Dockerfile

|
[source, bash]
----
docker run -p 4000:80 first-app
----
|Run `container` *friendlyname* with a mapping of port 4000 to 80

|
[source, bash]
----
docker run -d -p 4000:80 first-app
----
|Run container *friendlyname* with mapping, but in `detached mode`

|===============================================================================
//
//  end::recap_200_preparations[]

//  tag::recap_300_first_awesome_web[]
//
OAuth2 is an authentication framework, a protocol suite that enables 
applications to obtain (limited) access to user account data hosted at 
service providers.

The protocol suite introduces four roles, discussed in section <<OAuth Roles>>,
that interacts each other in a sequence, a *flow*. In section <<Base OAuth Flow>>
the sequence was discussed in more detail.

// ifdef::backend-html5[]
// .High Level OAuth Protocol Flow
// lightbox::oauth-abstract-protocol-flow[ 800, {data-oauth-abstract-protocol-flow} ]
// endif::[]

Keep in mind the *roles* and the fact, the OAuth framework introduce a sequence,
a *flow*. All this is theory - yes for sure, but good to know.
//
//  end::recap_300_first_awesome_web[]

// End Recap -------------------------------------------------------------------


// Whats Next
// -----------------------------------------------------------------------------
//  tag::whats_next_100_meet_and_greet_jekyll[]
//
Well done, folks. You learned all the basics, started an transformed web as
an app. And you've seen what is basicly going on under the hood. Now, you're
well prepared for going further, to have a more inside view.

For the next, a bit more knowledge, some theory is needed what *service providers*
are and how *authentication* works. You need to know what is *OAuth*, what
is *authentication* using the OAuth *framework*.

Welcome to the world of *OAuth2*, a leading technology for authentication, 
for creating relationships (associations) across different providers for
your new amazing site, for your new project.

mdi:skip-next[24px, md-grey]
Go for link:{j1-web-in-a-day-preparations}[Preparations] then!
//
//  end::whats_next_100_meet_and_greet_jekyll[]

//  tag::whats_next_200_preparations[]
//
After some practise and theory, you got a picture of what the OAuth 
framework is, a base understanding about the flow - what will happen. Now 
it's the time to see in real world what was discsused sofar.

The following chapter is focussing a web that is *protected*. The app is not
longer passing all the content pages. The content will be under *control*.

// mdi:skip-next[24px, md-grey] 
// To make protected *J1 Webs* real, continue on link:{j1-web-apps-run-an-secured-app}[Run an Secured J1 App]
// then!

//
//  end::whats_next_200_preparations[]

//  tag::whats_next_300_first_awesome_web[]
//
After some practise and theory, you got a picture of what the OAuth 
framework is, a base understanding about the flow - what will happen. Now 
it's the time to see in real world what was discsused sofar.

The following chapter is focussing a web that is *protected*. The app is not
longer passing all the content pages. The content will be under *control*.

// mdi:skip-next[24px, md-grey] 
// To make protected *J1 Webs* real, continue on link:{j1-web-apps-run-an-secured-app}[Run an Secured J1 App]
// then!

//
//  end::whats_next_300_first_awesome_web[]

// End Whats Next --------------------------------------------------------------


// Chapters
// -----------------------------------------------------------------------------
//  tag::chapters[]
//
Find here an overview on *all* chapters this tutorial. +
//
//  end::chapters[]

//  tag::chapters_100_meet_and_greet_jekyll[]
//
mdi:format-section[24px, md-grey ml-3]
link:#[You are here -- Meet & Greet Jekyll] +
mdi:format-section[24px, md-indigo ml-3]
link:{j1-web-in-a-day-preparations}[Preparations] +
mdi:format-section[24px, md-indigo ml-3]
link:{j1-web-in-a-day-first-awesome-web}[A first awesome Web]
//
//  end::chapters_100_meet_and_greet_jekyll[]


// End Chapters ----------------------------------------------------------------

